---
- hosts:    localhost
  gather_facts: true

  tasks:

  ## Disable Swap
  - name: Disable all active swap
    become: yes
    ansible.builtin.command: swapoff -a
    when: ansible_memory_mb.swap.total > 0  # Only run if swap is active

  - name: Comment out swap entries in /etc/fstab
    become: yes
    ansible.builtin.replace:
      path: /etc/fstab
      regexp: '^([^#].*?\sswap\s+sw\s+.*)$' # Matches active swap lines
      replace: '# \1'                       # Comments out the matched line
    when: ansible_memory_mb.swap.total > 0  # Only run if swap is active

  - name: Ensure swap file doesn't exist (if applicable)
    become: yes
    ansible.builtin.file:
      path: "{{ swap_file_path }}" # Define this variable if using a swap file
      state: absent
    when: swap_file_path is defined # Only run if swap_file_path is set

      
  ## Configure Firewall
  - name: Open ports for Kubernetes
    become: yes
    ansible.posix.firewalld:
      port:       "{{ item }}"
      state:      enabled
      permanent:  true
      offline:    true
      immediate:  true
    loop:
      - 6443/tcp        # Kubernetes API server
      - 2379-2380/tcp   # etcd server client API
      - 10250/tcp       # Kubelet API
      - 10256/tcp       # kube-proxy
      - 10257/tcp       # kube-controller-manager
      - 10259/tcp       # kube-scheduler
      - 30000-32767/tcp # NodePort Services (TCP)
      - 30000-32767/udp # NodePort Services (UDP)


  ## Set SELinux to permissive mode
  - name: Set SELinux to permissive mode
    become: yes
    ansible.posix.selinux:
      policy: targeted
      state: permissive
    when: ansible_os_family == "RedHat"

  - name: Install iptables, iproute-tc on RedHat-based Linux
    become: yes
    ansible.builtin.package:
      name:   "{{ item }}"
      state:  present
    loop:
      - iptables
      - iproute-tc
    when: ansible_os_family == "RedHat"

  - name: Load the overlay and bridge filter filter modules
    become: yes
    ansible.builtin.modprobe:
      name: "{{ item }}"
      state: present
    loop:
      - overlay
      - br_netfilter
    when: ansible_os_family == "RedHat"

  - name: Load the overlay and bridge filter filter modules
    become: yes
    ansible.builtin.modprobe:
      name: "{{ item }}"
      state: present
    loop:
      - overlay
      - br_netfilter
    when: ansible_os_family == "RedHat"

  - name: Add required sysctl parameters and persist
    become: yes
    ansible.builtin.copy:
      dest: "/etc/sysctl.d/k8s.conf"
      content: |
        net.bridge.bridge-nf-call-iptables  = 1
        net.bridge.bridge-nf-call-ip6tables = 1
        net.ipv4.ip_forward                 = 1
    when: ansible_os_family == "RedHat"

  - name: Apply sysctl parameters without a reboot
    become: yes
    ansible.builtin.command: sysctl --system
    when: ansible_os_family == "RedHat"
  
  
  ## Install Docker
  # - name: Add Docker repository on Fedora
  #   become: yes
  #   ansible.builtin.yum_repository:
  #     name: docker-ce-stable
  #     description: Docker CE Stable - $basearch
  #     baseurl: https://download.docker.com/linux/fedora/$releasever/$basearch/stable
  #     enabled: yes
  #     gpgcheck: yes
  #     gpgkey: https://download.docker.com/linux/fedora/gpg
  #     state: present
  #   when: ansible_distribution == "Fedora"

  # - name: Add Docker repository on Debian-based Linux
  #   become: yes
  #   ansible.builtin.apt_repository:
  #     repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable
  #     state: present
  #     filename: docker
  #     update_cache: yes
  #     validate_certs: yes
  #     codename: "{{ ansible_lsb.codename }}"
  #     arch: amd64
  #     keyserver: keyserver.ubuntu.com
  #     key: 0EBFCD88
  #   when: ansible_os_family == "Debian"

  - name: Update all packages to the latest version
    become: yes
    ansible.builtin.package:
      name:   "*"
      state:  latest

  - name: Install required packages
    become: yes
    ansible.builtin.package:
      name:   "{{ item }}"
      state:  present
    loop:
      - docker
      - docker-cli 
      - docker-buildx
      - docker-compose 
      - docker-compose-switch
      #- docker-compose-plugin
      - containerd
      - moby-engine
  
  - name: Enable containerd on RedHat-based Linux
    become: yes
    ansible.builtin.service:
      name:    containerd
      state:   started
      enabled: yes
    when: ansible_os_family == "RedHat"

  - name: Enable docker on RedHat-based Linux
    become: yes
    ansible.builtin.service:
      name:    docker
      state:   started
      enabled: yes
    when: ansible_os_family == "RedHat"
    
      
  ## Install Kubernetes
  - name: Create a directory for containerd config
    become: yes
    ansible.builtin.file:
      path: /etc/containerd
      state: directory
    when: ansible_os_family == "RedHat"

  - name: Create a default configuration file for containerd
    become: yes
    ansible.builtin.command: "containerd config default > /etc/containerd/config.toml"
    when: ansible_os_family == "RedHat"

  - name: Restart the containerd service to apply the changes
    become: yes
    ansible.builtin.service:
      name:    containerd.service
      state:   restarted
      enabled: yes
    when: ansible_os_family == "RedHat"

  - name: Update the SystemdCgroup directive by setting it to true
    become: yes
    ansible.builtin.replace:
      path: /etc/containerd/config.toml
      regexp: '(\s+)SystemdCgroup = false(\s+.*)?$'
      replace: '\1SystemdCgroup = true\2'
    when: ansible_os_family == "RedHat"



  - name: Add Kubernetes repository on RedHat-based Linux
    become: yes
    ansible.builtin.yum_repository:
      name: kubernetes
      description: Kubernetes
      baseurl: https://pkgs.k8s.io/core:/stable:/v1.33/rpm/
      enabled: yes
      gpgcheck: yes
      gpgkey: https://pkgs.k8s.io/core:/stable:/v1.33/rpm/repodata/repomd.xml.key
      state: present
      exclude: kubelet kubeadm kubectl cri-tools kubernetes-cni
    when: ansible_os_family == "RedHat"

  ## TODO: Add Kubernetes repository on Debian-based Linux


  - name: Install kubeadm, kubelet and kubectl
    become: yes
    dnf:
      name: "{{ item }}"
      state: present
      disable_excludes: kubernetes
    loop:
      - kubeadm
      - kubelet
      - kubectl
      - cri-tools
    when: ansible_os_family == "RedHat"

  - name: Enable kubelet on RedHat-based Linux
    become: yes
    service:
      name:    kubelet
      state:   started
      enabled: yes
    when: ansible_os_family == "RedHat"

  
  - name: Initialize Kubernetes master
    become: yes
    command: "kubeadm init"
    register: kubeadm_output
    ignore_errors: yes

  - name: Create the .kube directory
    file:
      path: /home/quintellarosa/.kube
      state: directory

  - name: Copy Kubernetes config file to the current user
    copy:
      remote_src: true
      src: /etc/kubernetes/admin.conf 
      dest: /home/quintellarosa/.kube/config
      owner: quintellarosa
      group: quintellarosa
    


  
  # - name: Install kubeadm, kubelet, and kubectl
  #   package:
  #     name: "{{ item }}"
  #     state: present
  #   loop:
  #     - kubernetes1.33-kubeadm-1.33.3-1.fc42.x86_64 # kubeadm
  #     - kubernetes1.33-1.33.3-1.fc42.x86_64         # kubelet
  #     - kubernetes1.33-client-1.33.3-1.fc42.x86_64  # kubectl
  
  # - name: Enable kubelet on RedHat-based Linux
  #   service:
  #     name:    kubelet
  #     state:   started
  #     enabled: yes
  #   when: ansible_os_family == "RedHat"

  # - name: Initialize Kubernetes master
  #   command: "kubeadm init --pod-network-cidr=10.10.0.0/16"
  #   register: kubeadm_output
  #   ignore_errors: yes

  # - name: Create the .kube directory
  #   file:
  #     path: /home/quintellarosa/.kube
  #     state: directory

  # - name: Copy Kubernetes config file to the current user
  #   copy:
  #     remote_src: true
  #     src: /etc/kubernetes/admin.conf 
  #     dest: /home/quintellarosa/.kube/config
  #     owner: quintellarosa
  #     group: quintellarosa

  # - name: Allow the control plane to also run pods for applications
  #   command: "kubectl taint nodes --all node-role.kubernetes.io/control-plane:NoSchedule-"
  #   become: yes
  #   become_user: quintellarosa
  #   ignore_errors: yes

  # - name: Deploy the Calico operator
  #   command: kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/tigera-operator.yaml
  # #   when: "'calico' in kubeadm_output.stdout"

  # - name: Download Calicoâ€™s custom-resources file 
  #   command: curl https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/custom-resources.yaml -O

  # - name: Update the CIDR defined in the custom-resources file to match the pod's network.
  #   replace:
  #     path: ./custom-resources.yaml
  #     regexp: '(\s+)cidr: 192\.168\.0\.0\/16/(\s+.*)?$'
  #     replace: '\1cidr: 10.10.0.0\/16\2'

  # - name: Create resources defined in the Calico custom resource YAML file.
  #   command: kubectl create -f custom-resources.yaml

  # - name: Download rancher.io/local-path storage class
  #   command: kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/master/deploy/local-path-storage.yaml

  # - name: Make this storage class (local-path) the default
  #   command: "kubectl patch storageclass local-path -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'"
